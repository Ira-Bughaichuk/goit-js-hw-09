{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAkCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAGtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTN,EACDI,EAAQ,CAAEN,WAAUC,UAErBM,EAAO,CAAEP,WAAUC,S,GAEnBA,E,KA3CS,CACXQ,OAAQC,SAASC,cAAc,SAC/BC,MAAOF,SAASC,cAAc,YAE3BF,OAAOI,iBAAiB,UAE7B,SAAsBC,GACpBA,EAAEC,iBAEF,IAAMC,EAAQC,OAAOH,EAAEI,OAAOC,SAASlB,MAAMmB,OACvCC,EAAOJ,OAAOH,EAAEI,OAAOC,SAASE,KAAKD,OACtCE,EAASL,OAAOH,EAAEI,OAAOC,SAASG,OAAOF,OAC9CG,QAAQC,IAAIR,EAAOK,EAAMC,GAEzB,IAAK,IAAIG,EAAI,EAAGA,GAAKH,EAAQG,GAAK,EAAE,CAClCF,QAAQC,IAAI,SAIZzB,EAAc0B,EAFGT,EAAQK,GAAQI,EAAI,IAGlCC,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACrBJ,EAAA+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAG1D8B,OAAM,SAAAJ,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACtBJ,EAAA+B,OAAOI,QAAQ,sBAAuCF,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  formEl: document.querySelector(\".form\"),\n  btnEl: document.querySelector(\"button\"),\n}\nrefs.formEl.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  const delay = Number(e.target.elements.delay.value);\n  const step = Number(e.target.elements.step.value);\n const amount = Number(e.target.elements.amount.value);\n  console.log(delay, step, amount);\n\n  for (let i = 1; i <= amount; i += 1){\n    console.log(\"doing\");\n   \n    const newDelay = delay + step * (i - 1);\n\n    createPromise(i, newDelay)\n      .then(({ position, delay }) => {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    //console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n      .catch(({ position, delay }) => {\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    //console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  }\n\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n \n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n  if (shouldResolve) {\n     resolve({ position, delay })\n  } else {\n    reject({ position, delay })\n  }\n }, delay)\n  })\n  \n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","formEl","document","querySelector","btnEl","addEventListener","e","preventDefault","delay1","Number","target","elements","value","step","amount","console","log","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.673f7100.js.map"}